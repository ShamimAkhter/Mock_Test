// <auto-generated />
using System;
using Examination.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Examination.Migrations
{
    [DbContext(typeof(ExaminationContext))]
    [Migration("20221231184858_Sync")]
    partial class Sync
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Examination.Models.Answer", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerFileLink")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "CandidateId", "QuestionId")
                        .HasName("PK__Answers__598DD811135C4DD8");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Examination.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CandidateId")
                        .HasName("PK__Candidat__DF539B9CC3BD6C78");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__Candidat__A9D105342AED8119");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Examination.Models.CandidateExam", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("ExamId", "CandidateId")
                        .HasName("PK__Candidat__F480187E1492DCFB");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidatesExams");
                });

            modelBuilder.Entity("Examination.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("datetime");

                    b.HasKey("ExamId")
                        .HasName("PK__Exams__297521C73F31E253");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Examination.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxMarks")
                        .HasColumnType("int");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06FAC362AD60B");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Examination.Models.QuestionSet", b =>
                {
                    b.Property<int>("QuestionSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("QuestionSetId")
                        .HasName("PK__Question__D5617EEC909DBEAD");

                    b.ToTable("QuestionSets");
                });

            modelBuilder.Entity("Examination.Models.QuestionSetsExam", b =>
                {
                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.HasKey("QuestionSetId", "ExamId")
                        .HasName("PK__Question__B7F62CF0BE697B48");

                    b.HasIndex("ExamId");

                    b.ToTable("QuestionSetsExams");
                });

            modelBuilder.Entity("Examination.Models.Answer", b =>
                {
                    b.HasOne("Examination.Models.CandidateExam", "CandidatesExams")
                        .WithMany("Answers")
                        .HasForeignKey("ExamId", "CandidateId")
                        .HasConstraintName("FK__Answers__35BCFE0A")
                        .IsRequired();
                });

            modelBuilder.Entity("Examination.Models.CandidateExam", b =>
                {
                    b.HasOne("Examination.Models.Candidate", "Candidate")
                        .WithMany("CandidatesExams")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK__Candidate__Candi__34C8D9D1")
                        .IsRequired();

                    b.HasOne("Examination.Models.Exam", "Exam")
                        .WithMany("CandidatesExams")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK__Candidate__ExamI__31EC6D26")
                        .IsRequired();
                });

            modelBuilder.Entity("Examination.Models.Question", b =>
                {
                    b.HasOne("Examination.Models.QuestionSet", "QuestionSet")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetId")
                        .HasConstraintName("FK__Questions__Quest__30F848ED")
                        .IsRequired();
                });

            modelBuilder.Entity("Examination.Models.QuestionSetsExam", b =>
                {
                    b.HasOne("Examination.Models.Exam", "Exam")
                        .WithMany("QuestionSetsExams")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK__QuestionS__ExamI__33D4B598")
                        .IsRequired();

                    b.HasOne("Examination.Models.QuestionSet", "QuestionSet")
                        .WithMany("QuestionSetsExams")
                        .HasForeignKey("QuestionSetId")
                        .HasConstraintName("FK__QuestionS__Quest__32E0915F")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
